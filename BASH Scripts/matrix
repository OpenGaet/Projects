#!/bin/bash
#Block One Assignment
#Name: Gaetan Ingrassia
#Date: 2019-04-22
#Class: CS344 Sec_400
  
# Determines whether arguments passed in are from stdin or a file
# Sets 'notSTDIN' as variable for future reference to how data was input
# Only used for functions where stdin is accepted
notSTDIN=0  
if [ "$#" = "1" ]
then
  dfpath="datafile$$"
  cat > $dfpath
elif [ "$#" = "2" ]
then
  notSTDIN=1
  dfpath=$2
fi

# If data was passed in through stdin, it is safe to remove temp file
if [ "$notSTDIN" = "0" ]
then
  trap "rm -f $dfpath" EXIT
fi

##################################################################
# NAME
#   argCheck
# SYNOPSIS
#   argCheck [INT INT FILE FILE]
# DESCRIPTION
#   Checks the number of arguments and whether or not the file(s)
#   passed to matrix are actually readable files. Exits with
#   non-zero value if there is an error.
# AUTHOR
#   Written by Gaetan Ingrassia
##################################################################
argCheck () {
  if [ $1 -eq 1 ]
  then
    if [ $2 -gt 1 ]
    then
      1>&2 echo "Arg count greater than 1"
      rm -f "$dfpath"
      exit 1
    fi
    if [ "$notSTDIN" = "1" ] && [ ! -e $3 ]
    then
      1>&2 echo "No such file"
      exit 1
    fi  
    if [ -f $3 ] && [ ! -r $3 ]
    then
      1>&2 echo "File not read"
      #rm -f $dfpath
      exit 1
    fi
  elif [ $1 -eq 2 ]
  then
    if [ ! $2 -eq 2 ]
    then
      1>&2 echo "Arg count not equal to two."
      rm -f "$dfpath"
      exit 1
    fi
    if [ ! -r $3 ] || [ ! -r $4 ]
    then
      1>&2 echo "File not read"
      rm -f "$dfpath"
      exit 1
    fi
  fi
}


################################################################
# NAME
#   dims
# SYNOPSIS
#   dims [FILE]
# DESCRIPTION
#   Returns the number of rows and columns of a given matrix.
#   MAtrix is taken from stdin or a file.
# AUTHOR
#   Written by Gaetan Ingrassia
################################################################
dims () { 

  argCheck 1 $# $dfpath 

  # Increment row and column number as loop progresses
  row=0
  col=0
  while read line
  do
    col=0
    row=$((row + 1))
    for i in $line
    do
      col=$((col + 1))
    done	
  done < $dfpath
  
  # Print number of rows and columns
  echo "$row $col"

  exit 0
}

################################################################
# NAME
#   transpose
# SYNOPSIS
#   transpose [FILE]
# DESCRIPTION
#   Transposes the given matrix. The matrix is taken from stdin
#   or a file.
# AUTHOR
#   Written by Gaetan Ingrassia
################################################################
transpose () {

  argCheck 1 $# $dfpath 

  # Create temporary files
  trans="trfile$$"
  rfile="rowfile$$"
  
  # Cut the columns of the input matrix, delimited by tabs,
  # and add them to the transposed matrix, while fixing formatting.
  count=1
  read rowline < $dfpath
  for int in $rowline
  do
    cut -f$count -d$'\t' $dfpath > $rfile
    cat $rfile | tr '\n' '\t' >> $trans
    truncate -s-1 $trans
    echo >> $trans
    count=$(( count + 1 ))
  done
  
  # Print matrix
  cat "$trans"

  # Delete temporary files
  rm $rfile
  rm $trans
  exit 0
}

################################################################
# NAME
#   mean 
# SYNOPSIS
#   mean [FILE]
# DESCRIPTION
#   Find the mean of each column and outputs the means as a row.
#   Takes in one matrix from either stdin or a file.
# AUTHOR
#   Written by Gaetan Ingrassia
################################################################
mean () {

  argCheck 1 $# $dfpath 
  
  # Create temporary files
  trans="trfile$$"
  rfile="rowfile$$"
  mfile="meanfile$$"

  # Transpose the matrix for easier handling
  count=1
  read rowline < $dfpath
  for int in $rowline
  do
    cut -f$count -d$'\t' $dfpath > $rfile
    truncate -s-1 $rfile
    cat $rfile | tr '\n' '\t' >> $trans
    echo >> $trans
    count=$((count + 1))
  done

  # Find the mean of each row in the transposed matrix
  while read thisline
  do
    sum=0
    count=0
    for i in $thisline
    do
      sum=$((sum + i))
      count=$((count + 1))
    done
    avg=$(( (sum + (count / 2) * ( (sum>0) * 2 - 1 ) ) / count ))
    echo -e "$avg\t" >> $mfile
    truncate -s-1 $mfile
  done < $trans
  
  # Fix end of file
  truncate -s-1 $mfile
  echo >> $mfile
  
  # Print mean row
  cat "$mfile"

  # Delete temporary files
  rm -f "$rfile"
  rm -f "$trans"
  rm -f "$mfile"
  exit 0
}

################################################################
# NAME
#   add 
# SYNOPSIS
#   add [FILE FILE]
# DESCRIPTION
#   Performs elementwise addition on two matrices with matching
#   dimensions. The two matrices are taken from their respective
#   files.
# AUTHOR
#   Written by Gaetan Ingrassia
################################################################
add () {

  argCheck 2 $# $1 $2
  
  # Dimension Check
  row1=0
  col1=0
  while read line
  do
    col1=0
    row1=$((row1 + 1))
    for i in $line
    do
      col1=$((col1 + 1))
    done	
  done < $1
  row2=0
  col2=0
  while read line
  do
    col2=0
    row2=$((row2 + 1))
    for i in $line
    do
      col2=$((col2 + 1))
    done	
  done < $2

  # If dimensions do not match, exit with status 1
  if [ ! "$col1" = "$col2" ] || [ ! "$row1" = "$row2" ]
  then
    1>&2 echo "Dimension Mismatch"
    exit 1
  fi

# Addition Process

  # Create temporary file
  afile="addfile$$"
  
  # Arrays are used for temporary storage of the rows
  declare -a arr1
  declare -a arr2

  # Loop through respective rows of the matrices and
  # perform element-wise addition. 
  # Uses file descriptors to loop through both matrices
  # at the same time.
  count=0
  while read line1 && read line2 <&3
  do
    for int1 in $line1
    do
      arr1[$count]=$int1
      count=$((count + 1))
    done
    count=0
    for int2 in $line2
    do
      arr2[$count]=$int2
      count=$((count + 1))
    done
    count=0
    for i in "${arr1[@]}"
    do
      sum=$((arr1[count] + arr2[count]))
      echo -e "$sum\t" >> $afile
      truncate -s-1 $afile
      count=$((count + 1))
    done
    truncate -s-1 $afile
    echo >> $afile
    count=0
  done < $1 3< $2

  # Print matrix
  cat $afile

  # Delete temporary files
  rm -f "$afile"
  exit 0
}

################################################################
# NAME
#   multiply
# SYNOPSIS
#   multiply [FILE FILE]
# DESCRIPTION
#   Performs matrix multiplication on two matrices provided
#   by two passed in files. It also ensures matching dimensions.
# AUTHOR
#   Written by Gaetan Ingrassia
################################################################
multiply () {

  argCheck 2 $# $1 $2
  
  # Dimension Check
  row1=0
  col1=0
  while read line
  do
    col1=0
    row1=$((row1 + 1))
    for i in $line
    do
      col1=$((col1 + 1))
    done	
  done < $1
  row2=0
  col2=0
  while read line
  do
    col2=0
    row2=$((row2 + 1))
    for i in $line
    do
      col2=$((col2 + 1))
    done	
  done < $2

  # If dimensions do not match, exit with status 1
  if [ ! "$col1" = "$row2" ]
  then
    1>&2 echo "Dimension Mismatch"
    exit 1
  fi


# Multiplication Process 

  # Create temporary files
  trans="trfile$$"
  rfile="rowfile$$"

  # Arrays are used as temporary storage for each row
  declare -a arr1
  declare -a arr2

  # Get second matrix transposed
  count=1
  read rowline < $2
  for int in $rowline
  do
    cut -f$count -d$'\t' $2 > $rfile
    cat $rfile | tr '\n' '\t' >> $trans
    truncate -s-1 $trans
    echo >> $trans
    count=$((count + 1 ))
  done
 
  # Loop through MxN matrix (m1) and transpose of NxP matrix two (m2).
  # For each row of m1 perform element-wise multiplication with every row of m2.
  # Sum the products of each row and place in MxP matrix.
  afile="multfile$$"
  count=0
  prod=0
  while read line1 #&& read line2 <&3
  do
    for int1 in $line1
    do
      arr1[$count]=$int1
      count=$((count + 1))
    done
    count=0
    while read line2
    do
      for int2 in $line2
      do
        arr2[$count]=$int2
        count=$((count + 1))
      done
      count=0
      for i in "${arr1[@]}"
      do
        prod=$((prod + (arr1[count] * arr2[count]) ))
        count=$((count + 1))
      done  
      echo -e "$prod\t" >> $afile
      truncate -s-1 $afile
      count=0
      prod=0
    done < $trans 
    truncate -s-1 $afile
    echo >> $afile
  done < $1 

  # Print matrix
  cat $afile

  # Delete temporary files
  rm -f "$afile"
  rm -f "$rfile"
  rm -f "$trans"
  exit 0
}


#####################
#######MAIN##########



$@
